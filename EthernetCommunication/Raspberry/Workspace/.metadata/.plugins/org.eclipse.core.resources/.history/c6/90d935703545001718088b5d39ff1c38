/*============================================================================*/
/* FICHERO     : ModbusTCPTest.cpp                                               */
/* COMETIDO    : Programa Principal del test para prueba de programacion RPi2 */
/* VERSIONES   : V1.00 - Inicio = 12-01-2017 - Final = 12-01-2017 - Fede Pérez*/
/* COMENTARIOS : V1.00 - Versión inicial                                      */
/*============================================================================*/
/*============================================================================*/
/* Ficheros de cabeceras                                                      */
/*============================================================================*/

#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <modbus.h>


#include "unit-test.h"

enum {
    TCP,
    TCP_PI,
    RTU
};




/*============================================================================*/
/* Macros y definiciones                                                      */
/*============================================================================*/

#define RPI2TEST01_NO_ERROR        0
#define RPI2TEST01_ERROR           -1


#define LOOP             1





/*============================================================================*/
/* Funciones de usuario                                                       */
/*============================================================================*/

/*============================================================================*/
/* Nombre    : CheckModbusTCPTest                                                */
/* Funcion   : Prueba Test01                                                  */
/* Parametros: Ninguno                                                        */
/* Salida    : [INT] Error de salida                                          */
/* Version   : [00.00.00] Inicio = 12-01-2017 - Final = 12-01-2017  Fede Perez*/
/* Comentario:                                                                */
/*============================================================================*/

int CheckRPi2Test01(void)
{
 int out = RPI2TEST01_NO_ERROR;
 return out;

}

/*============================================================================*/
/* Programa Principal                                                         */
/*============================================================================*/
/*============================================================================*/
/* Nombre    : main                                                           */
/* Funcion   : Programa principal de la aplicación                            */
/* Parametros: [IN] [INT] argc - numero de argumentos                         */
/*           : [IN] [PCHAR[]] argv - valor de argumentos                      */
/* Salida    : [INT] Error producido                                          */
/* Version   : [00.00.00] Inicio = 12-01-2017 - Final = 12-01-2017  Fede Perez*/
/*============================================================================*/

int main(int argc, char *argv[])
{





	int out = RPI2TEST01_ERROR;


	    uint16_t *tab_rp_registers;
	    uint16_t *tab_rq_registers;
	    modbus_t *ctx;
	    int i;
	    uint8_t value;
	    int nb_points;
	    int rc;
	    float real;
	    uint32_t ireal;
	    struct timeval old_response_timeout;
	    struct timeval response_timeout;
	    int use_backend;
	    int nb_loop;

	    //Config to TCP
	    if (argc > 1) {

	    	if (strcmp(argv[1], "tcp") == 0) {
	            use_backend = TCP;
	        } else {
	        	fprintf(stderr, "NO TCP\n");
	        }

	    } else {
	        /* By default */
	        use_backend = TCP;
	    }



	    if (use_backend == TCP) {
	        ctx = modbus_new_tcp("192.168.0.146", 502);
	    } else {
	    	fprintf(stderr, "NO TCP\n");

	    }


	    if (ctx == NULL) {
	        fprintf(stderr, "Unable to allocate libmodbus context\n");
	        return -1;
	    }


	    modbus_set_debug(ctx, TRUE);
	    modbus_set_error_recovery(ctx,MODBUS_ERROR_RECOVERY_LINK );
	    modbus_set_error_recovery(ctx,MODBUS_ERROR_RECOVERY_PROTOCOL);

	   /* modbus_set_error_recovery(ctx,
	                              MODBUS_ERROR_RECOVERY_LINK |
	                              MODBUS_ERROR_RECOVERY_PROTOCOL); */

	    //Connect
	   if (modbus_connect(ctx) == -1) {
	        fprintf(stderr, "Connection failed: %s\n",
	                modbus_strerror(errno));
	        modbus_free(ctx);
	        return -1;
	    }



	    /* Allocate and initialize the memory to store the registers */
	    nb_points = (UT_REGISTERS_NB > UT_INPUT_REGISTERS_NB) ?
	        UT_REGISTERS_NB : UT_INPUT_REGISTERS_NB;

	    tab_rq_registers = (uint16_t *) malloc(nb_points * sizeof(uint16_t));
	    memset(tab_rq_registers, 0, nb_points * sizeof(uint16_t));

	    tab_rp_registers = (uint16_t *) malloc(nb_points * sizeof(uint16_t));
	    memset(tab_rp_registers, 0, nb_points * sizeof(uint16_t));

	    printf("** UNIT TESTING : INPUT REGISTERS**\n");



	    /** INPUT REGISTERS **/

	    //Read input registers
/*	    rc = modbus_read_input_registers(ctx, UT_INPUT_REGISTERS_ADDRESS,UT_INPUT_REGISTERS_NB,
	                                     tab_rp_registers);
	    printf("Modbus_read_input_registers: ");
	    if (rc != UT_INPUT_REGISTERS_NB) {
	        printf("FAILED (nb points %d)\n", rc);
	        goto close;
	    }
	    for (i=0; i < UT_INPUT_REGISTERS_NB; i++) {
	   	 printf("value = %d\n",tab_rp_registers[i]);

	  /*  if (tab_rp_registers[i] != UT_INPUT_REGISTERS_TAB[i]) {
	            printf("FAILED (%0X != %0X)\n",
	                   tab_rp_registers[i], UT_INPUT_REGISTERS_TAB[i]);
	            goto close;
	        }
	  *//*  }

	    printf("OK\n");




	  	    rc = modbus_read_input_registers(ctx, 101,UT_INPUT_REGISTERS_NB,
	  	                                     tab_rp_registers);
	  	    printf("Modbus_read_input_registers: ");
	  	    if (rc != UT_INPUT_REGISTERS_NB) {
	  	        printf("FAILED (nb points %d)\n", rc);
	  	        goto close;
	  	    }
	  	    for (i=0; i < UT_INPUT_REGISTERS_NB; i++) {
	  	   	 printf("value = %d\n",tab_rp_registers[i]);

	  	  /*  if (tab_rp_registers[i] != UT_INPUT_REGISTERS_TAB[i]) {
	  	            printf("FAILED (%0X != %0X)\n",
	  	                   tab_rp_registers[i], UT_INPUT_REGISTERS_TAB[i]);
	  	            goto close;
	  	        }
	  	  */ /* }



		    printf("OK\n");

*/

	    nb_loop=0;
	    while (nb_loop++ < LOOP) {
	           for (addr = ADDRESS_START; addr <= ADDRESS_END; addr++) {
	               int i;

	               /* Random numbers (short) */
	               for (i=0; i<nb; i++) {
	                   tab_rq_registers[i] = (uint16_t) (65535.0*rand() / (RAND_MAX + 1.0));
	                   tab_rw_rq_registers[i] = ~tab_rq_registers[i];
	                   tab_rq_bits[i] = tab_rq_registers[i] % 2;
	               }
	               nb = ADDRESS_END - addr;

	               /* WRITE BIT */
	               rc = modbus_write_bit(ctx, addr, tab_rq_bits[0]);
	               if (rc != 1) {
	                   printf("ERROR modbus_write_bit (%d)\n", rc);
	                   printf("Address = %d, value = %d\n", addr, tab_rq_bits[0]);
	                   nb_fail++;
	               } else {
	                   rc = modbus_read_bits(ctx, addr, 1, tab_rp_bits);
	                   if (rc != 1 || tab_rq_bits[0] != tab_rp_bits[0]) {
	                       printf("ERROR modbus_read_bits single (%d)\n", rc);
	                       printf("address = %d\n", addr);
	                       nb_fail++;
	                   }
	               }

	               /* MULTIPLE BITS */
	               rc = modbus_write_bits(ctx, addr, nb, tab_rq_bits);
	               if (rc != nb) {
	                   printf("ERROR modbus_write_bits (%d)\n", rc);
	                   printf("Address = %d, nb = %d\n", addr, nb);
	                   nb_fail++;
	               } else {
	                   rc = modbus_read_bits(ctx, addr, nb, tab_rp_bits);
	                   if (rc != nb) {
	                       printf("ERROR modbus_read_bits\n");
	                       printf("Address = %d, nb = %d\n", addr, nb);
	                       nb_fail++;
	                   } else {
	                       for (i=0; i<nb; i++) {
	                           if (tab_rp_bits[i] != tab_rq_bits[i]) {
	                               printf("ERROR modbus_read_bits\n");
	                               printf("Address = %d, value %d (0x%X) != %d (0x%X)\n",
	                                      addr, tab_rq_bits[i], tab_rq_bits[i],
	                                      tab_rp_bits[i], tab_rp_bits[i]);
	                               nb_fail++;
	                           }
	                       }
	                   }
	               }

	               /* SINGLE REGISTER */
	               rc = modbus_write_register(ctx, addr, tab_rq_registers[0]);
	               if (rc != 1) {
	                   printf("ERROR modbus_write_register (%d)\n", rc);
	                   printf("Address = %d, value = %d (0x%X)\n",
	                          addr, tab_rq_registers[0], tab_rq_registers[0]);
	                   nb_fail++;
	               } else {
	                   rc = modbus_read_registers(ctx, addr, 1, tab_rp_registers);
	                   if (rc != 1) {
	                       printf("ERROR modbus_read_registers single (%d)\n", rc);
	                       printf("Address = %d\n", addr);
	                       nb_fail++;
	                   } else {
	                       if (tab_rq_registers[0] != tab_rp_registers[0]) {
	                           printf("ERROR modbus_read_registers single\n");
	                           printf("Address = %d, value = %d (0x%X) != %d (0x%X)\n",
	                                  addr, tab_rq_registers[0], tab_rq_registers[0],
	                                  tab_rp_registers[0], tab_rp_registers[0]);
	                           nb_fail++;
	                       }
	                   }
	               }

	               /* MULTIPLE REGISTERS */
	               rc = modbus_write_registers(ctx, addr, nb, tab_rq_registers);
	               if (rc != nb) {
	                   printf("ERROR modbus_write_registers (%d)\n", rc);
	                   printf("Address = %d, nb = %d\n", addr, nb);
	                   nb_fail++;
	               } else {
	                   rc = modbus_read_registers(ctx, addr, nb, tab_rp_registers);
	                   if (rc != nb) {
	                       printf("ERROR modbus_read_registers (%d)\n", rc);
	                       printf("Address = %d, nb = %d\n", addr, nb);
	                       nb_fail++;
	                   } else {
	                       for (i=0; i<nb; i++) {
	                           if (tab_rq_registers[i] != tab_rp_registers[i]) {
	                               printf("ERROR modbus_read_registers\n");
	                               printf("Address = %d, value %d (0x%X) != %d (0x%X)\n",
	                                      addr, tab_rq_registers[i], tab_rq_registers[i],
	                                      tab_rp_registers[i], tab_rp_registers[i]);
	                               nb_fail++;
	                           }
	                       }
	                   }
	               }
	               /* R/W MULTIPLE REGISTERS */
	               rc = modbus_write_and_read_registers(ctx,
	                                                    addr, nb, tab_rw_rq_registers,
	                                                    addr, nb, tab_rp_registers);
	               if (rc != nb) {
	                   printf("ERROR modbus_read_and_write_registers (%d)\n", rc);
	                   printf("Address = %d, nb = %d\n", addr, nb);
	                   nb_fail++;
	               } else {
	                   for (i=0; i<nb; i++) {
	                       if (tab_rp_registers[i] != tab_rw_rq_registers[i]) {
	                           printf("ERROR modbus_read_and_write_registers READ\n");
	                           printf("Address = %d, value %d (0x%X) != %d (0x%X)\n",
	                                  addr, tab_rp_registers[i], tab_rw_rq_registers[i],
	                                  tab_rp_registers[i], tab_rw_rq_registers[i]);
	                           nb_fail++;
	                       }
	                   }

	                   rc = modbus_read_registers(ctx, addr, nb, tab_rp_registers);
	                   if (rc != nb) {
	                       printf("ERROR modbus_read_registers (%d)\n", rc);
	                       printf("Address = %d, nb = %d\n", addr, nb);
	                       nb_fail++;
	                   } else {
	                       for (i=0; i<nb; i++) {
	                           if (tab_rw_rq_registers[i] != tab_rp_registers[i]) {
	                               printf("ERROR modbus_read_and_write_registers WRITE\n");
	                               printf("Address = %d, value %d (0x%X) != %d (0x%X)\n",
	                                      addr, tab_rw_rq_registers[i], tab_rw_rq_registers[i],
	                                      tab_rp_registers[i], tab_rp_registers[i]);
	                               nb_fail++;
	                           }
	                       }
	                   }
	               }
	           }

	           printf("Test: ");
	           if (nb_fail)
	               printf("%d FAILS\n", nb_fail);
	           else
	               printf("SUCCESS\n");
	       }



	close:
	    /* Free the memory */

	    free(tab_rp_registers);

	    /* Close the connection */
	    modbus_close(ctx);
	    modbus_free(ctx);



 return out;

}

/*============================================================================*/
/* Fin de fichero ModbusTCPTest.cpp                                              */
/*============================================================================*/
